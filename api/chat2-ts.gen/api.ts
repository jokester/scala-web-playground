/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * src/chat2.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Chat2ChannelInfo
 */
export interface Chat2ChannelInfo {
    /**
     * 
     * @type {string}
     * @memberof Chat2ChannelInfo
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Chat2ChannelInfo
     */
    uuid: string;
    /**
     * 
     * @type {Array&lt;Chat2UserInfo&gt;}
     * @memberof Chat2ChannelInfo
     */
    users?: Array<Chat2UserInfo>;
}

/**
 * 
 * @export
 * @interface Chat2ChatMessage
 */
export interface Chat2ChatMessage {
    /**
     * 
     * @type {string}
     * @memberof Chat2ChatMessage
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat2ChatMessage
     */
    userUuid: string;
    /**
     * 
     * @type {string}
     * @memberof Chat2ChatMessage
     */
    channelUuid: string;
    /**
     * 
     * @type {string}
     * @memberof Chat2ChatMessage
     */
    text: string;
    /**
     * 
     * @type {string}
     * @memberof Chat2ChatMessage
     */
    timestamp: string;
}

/**
 * 
 * @export
 * @interface Chat2Command
 */
export interface Chat2Command {
    /**
     * 
     * @type {string}
     * @memberof Chat2Command
     */
    method: string;
    /**
     * 
     * @type {number}
     * @memberof Chat2Command
     */
    seq: number;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof Chat2Command
     */
    errors?: Array<string>;
}

/**
 * 
 * @export
 * @interface Chat2UserInfo
 */
export interface Chat2UserInfo {
    /**
     * 
     * @type {string}
     * @memberof Chat2UserInfo
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Chat2UserInfo
     */
    uuid: string;
}

/**
 * 
 * @export
 * @interface ServerAuthed
 */
export interface ServerAuthed {
    /**
     * 
     * @type {Chat2Command}
     * @memberof ServerAuthed
     */
    cmd: Chat2Command;
    /**
     * 
     * @type {Chat2UserInfo}
     * @memberof ServerAuthed
     */
    identity: Chat2UserInfo;
}

/**
 * 
 * @export
 * @interface ServerBaseRes
 */
export interface ServerBaseRes {
    /**
     * 
     * @type {Chat2Command}
     * @memberof ServerBaseRes
     */
    cmd: Chat2Command;
}

/**
 * 
 * @export
 * @interface ServerBroadcast
 */
export interface ServerBroadcast {
    /**
     * 
     * @type {Chat2Command}
     * @memberof ServerBroadcast
     */
    cmd?: Chat2Command;
    /**
     * 
     * @type {Array&lt;Chat2ChannelInfo&gt;}
     * @memberof ServerBroadcast
     */
    channels: Array<Chat2ChannelInfo>;
    /**
     * 
     * @type {Array&lt;Chat2ChatMessage&gt;}
     * @memberof ServerBroadcast
     */
    messages: Array<Chat2ChatMessage>;
}

/**
 * 
 * @export
 * @interface ServerJoinedChannel
 */
export interface ServerJoinedChannel {
    /**
     * 
     * @type {Chat2Command}
     * @memberof ServerJoinedChannel
     */
    cmd: Chat2Command;
    /**
     * 
     * @type {Chat2ChannelInfo}
     * @memberof ServerJoinedChannel
     */
    channel: Chat2ChannelInfo;
    /**
     * 
     * @type {Array&lt;Chat2ChatMessage&gt;}
     * @memberof ServerJoinedChannel
     */
    history: Array<Chat2ChatMessage>;
}

/**
 * 
 * @export
 * @interface ServerLeftChannel
 */
export interface ServerLeftChannel {
    /**
     * 
     * @type {Chat2Command}
     * @memberof ServerLeftChannel
     */
    cmd: Chat2Command;
    /**
     * 
     * @type {string}
     * @memberof ServerLeftChannel
     */
    reason: string;
}

/**
 * 
 * @export
 * @interface ServerPong
 */
export interface ServerPong {
    /**
     * 
     * @type {Chat2Command}
     * @memberof ServerPong
     */
    cmd: Chat2Command;
}

/**
 * 
 * @export
 * @interface ServerSentChat
 */
export interface ServerSentChat {
    /**
     * 
     * @type {Chat2Command}
     * @memberof ServerSentChat
     */
    cmd: Chat2Command;
    /**
     * 
     * @type {Chat2ChatMessage}
     * @memberof ServerSentChat
     */
    msg: Chat2ChatMessage;
}

/**
 * 
 * @export
 * @interface UserAuth
 */
export interface UserAuth {
    /**
     * 
     * @type {Chat2Command}
     * @memberof UserAuth
     */
    cmd: Chat2Command;
    /**
     * 
     * @type {string}
     * @memberof UserAuth
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserAuth
     */
    otp: string;
}

/**
 * 
 * @export
 * @interface UserBaseReq
 */
export interface UserBaseReq {
    /**
     * 
     * @type {Chat2Command}
     * @memberof UserBaseReq
     */
    cmd: Chat2Command;
}

/**
 * 
 * @export
 * @interface UserJoinChannel
 */
export interface UserJoinChannel {
    /**
     * 
     * @type {Chat2Command}
     * @memberof UserJoinChannel
     */
    cmd: Chat2Command;
    /**
     * 
     * @type {string}
     * @memberof UserJoinChannel
     */
    name: string;
}

/**
 * 
 * @export
 * @interface UserLeaveChannel
 */
export interface UserLeaveChannel {
    /**
     * 
     * @type {Chat2Command}
     * @memberof UserLeaveChannel
     */
    cmd: Chat2Command;
    /**
     * 
     * @type {string}
     * @memberof UserLeaveChannel
     */
    channelUuid: string;
}

/**
 * 
 * @export
 * @interface UserPing
 */
export interface UserPing {
    /**
     * 
     * @type {Chat2Command}
     * @memberof UserPing
     */
    cmd: Chat2Command;
}

/**
 * 
 * @export
 * @interface UserSendChat
 */
export interface UserSendChat {
    /**
     * 
     * @type {Chat2Command}
     * @memberof UserSendChat
     */
    cmd: Chat2Command;
    /**
     * 
     * @type {string}
     * @memberof UserSendChat
     */
    channelUuid: string;
    /**
     * 
     * @type {string}
     * @memberof UserSendChat
     */
    text: string;
}


/**
 * DummyChat2ServiceApi - fetch parameter creator
 * @export
 */
export const DummyChat2ServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserAuth} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth(body: UserAuth, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling auth.');
            }
            const localVarPath = `/not-used/chat2.Auth`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserAuth" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserBaseReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcast(body: UserBaseReq, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling broadcast.');
            }
            const localVarPath = `/not-used/chat2.Broadcast`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserBaseReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserJoinChannel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinChannel(body: UserJoinChannel, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling joinChannel.');
            }
            const localVarPath = `/not-used/chat2.JoinChannel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserJoinChannel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLeaveChannel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveChannel(body: UserLeaveChannel, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling leaveChannel.');
            }
            const localVarPath = `/not-used/chat2.LeaveChannel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserLeaveChannel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserPing} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingPong(body: UserPing, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pingPong.');
            }
            const localVarPath = `/not-used/chat2.PingPong`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserPing" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserSendChat} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendChat(body: UserSendChat, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sendChat.');
            }
            const localVarPath = `/not-used/chat2.SendChat`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserSendChat" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DummyChat2ServiceApi - functional programming interface
 * @export
 */
export const DummyChat2ServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserAuth} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth(body: UserAuth, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServerAuthed> {
            const localVarFetchArgs = DummyChat2ServiceApiFetchParamCreator(configuration).auth(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UserBaseReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcast(body: UserBaseReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServerBroadcast> {
            const localVarFetchArgs = DummyChat2ServiceApiFetchParamCreator(configuration).broadcast(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UserJoinChannel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinChannel(body: UserJoinChannel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServerJoinedChannel> {
            const localVarFetchArgs = DummyChat2ServiceApiFetchParamCreator(configuration).joinChannel(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UserLeaveChannel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveChannel(body: UserLeaveChannel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServerLeftChannel> {
            const localVarFetchArgs = DummyChat2ServiceApiFetchParamCreator(configuration).leaveChannel(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UserPing} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingPong(body: UserPing, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServerPong> {
            const localVarFetchArgs = DummyChat2ServiceApiFetchParamCreator(configuration).pingPong(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UserSendChat} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendChat(body: UserSendChat, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServerSentChat> {
            const localVarFetchArgs = DummyChat2ServiceApiFetchParamCreator(configuration).sendChat(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DummyChat2ServiceApi - factory interface
 * @export
 */
export const DummyChat2ServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {UserAuth} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth(body: UserAuth, options?: any) {
            return DummyChat2ServiceApiFp(configuration).auth(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UserBaseReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcast(body: UserBaseReq, options?: any) {
            return DummyChat2ServiceApiFp(configuration).broadcast(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UserJoinChannel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinChannel(body: UserJoinChannel, options?: any) {
            return DummyChat2ServiceApiFp(configuration).joinChannel(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UserLeaveChannel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveChannel(body: UserLeaveChannel, options?: any) {
            return DummyChat2ServiceApiFp(configuration).leaveChannel(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UserPing} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingPong(body: UserPing, options?: any) {
            return DummyChat2ServiceApiFp(configuration).pingPong(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UserSendChat} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendChat(body: UserSendChat, options?: any) {
            return DummyChat2ServiceApiFp(configuration).sendChat(body, options)(fetch, basePath);
        },
    };
};

/**
 * DummyChat2ServiceApi - object-oriented interface
 * @export
 * @class DummyChat2ServiceApi
 * @extends {BaseAPI}
 */
export class DummyChat2ServiceApi extends BaseAPI {
    /**
     * 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DummyChat2ServiceApi
     */
    public auth(body: UserAuth, options?: any) {
        return DummyChat2ServiceApiFp(this.configuration).auth(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DummyChat2ServiceApi
     */
    public broadcast(body: UserBaseReq, options?: any) {
        return DummyChat2ServiceApiFp(this.configuration).broadcast(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DummyChat2ServiceApi
     */
    public joinChannel(body: UserJoinChannel, options?: any) {
        return DummyChat2ServiceApiFp(this.configuration).joinChannel(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DummyChat2ServiceApi
     */
    public leaveChannel(body: UserLeaveChannel, options?: any) {
        return DummyChat2ServiceApiFp(this.configuration).leaveChannel(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DummyChat2ServiceApi
     */
    public pingPong(body: UserPing, options?: any) {
        return DummyChat2ServiceApiFp(this.configuration).pingPong(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DummyChat2ServiceApi
     */
    public sendChat(body: UserSendChat, options?: any) {
        return DummyChat2ServiceApiFp(this.configuration).sendChat(body, options)(this.fetch, this.basePath);
    }

}

